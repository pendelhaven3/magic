<?xml version="1.0" encoding="UTF-8"?>
<root>
	<entry name="customerSalesSummaryReport">
	<![CDATA[
select cust.CODE as CUSTOMER_CODE, cust.NAME as CUSTOMER_NAME, 
	sum(TOTAL_NET_AMOUNT) as TOTAL_NET_AMOUNT,
	sum(TOTAL_COST) as TOTAL_COST,
	sum(TOTAL_PROFIT) as TOTAL_PROFIT
from (
	select CUSTOMER_ID, sum(NET_AMOUNT) as TOTAL_NET_AMOUNT, sum(TOTAL_COST) as TOTAL_COST, sum(NET_AMOUNT) - sum(TOTAL_COST) as TOTAL_PROFIT
	from (
		select a.CUSTOMER_ID,
		b.UNIT_PRICE * b.QUANTITY * (1 - DISCOUNT_1/100) * (1 - DISCOUNT_2/100) * (1 - DISCOUNT_3/100) - FLAT_RATE_DISCOUNT as NET_AMOUNT,
		b.COST * b.QUANTITY as TOTAL_COST
		from SALES_INVOICE a
		join SALES_INVOICE_ITEM b
		  on b.SALES_INVOICE_ID = a.ID
		where a.MARK_IND = 'Y'
        and a.TRANSACTION_DT >= :fromDate
        and a.TRANSACTION_DT <= :toDate
	) agg
	group by CUSTOMER_ID
	union all
	select CUSTOMER_ID, 
		-1 * sum(NET_AMOUNT) as TOTAL_NET_AMOUNT,
		-1 * sum(TOTAL_COST) as TOTAL_COST, 
		-1 * (sum(NET_AMOUNT) - sum(TOTAL_COST)) as TOTAL_PROFIT
	from (
		select d.CUSTOMER_ID,
		c.UNIT_PRICE * b.QUANTITY * (1 - DISCOUNT_1/100) * (1 - DISCOUNT_2/100) * (1 - DISCOUNT_3/100) - (FLAT_RATE_DISCOUNT / c.QUANTITY * b.QUANTITY) as NET_AMOUNT,
		c.COST * b.QUANTITY as TOTAL_COST
		from SALES_RETURN a
		join SALES_RETURN_ITEM b
		  on b.SALES_RETURN_ID = a.ID
		join SALES_INVOICE_ITEM c
		  on c.ID = b.SALES_INVOICE_ITEM_ID
		join SALES_INVOICE d
		  on d.ID = a.SALES_INVOICE_ID
		where a.POST_IND = 'Y'
        and a.POST_DT >= :fromDate
        and a.POST_DT < date_add(:toDate, interval 1 day)
	) agg
	group by CUSTOMER_ID
	union all
	select CUSTOMER_ID, 
	-1 * sum(NET_AMOUNT) as TOTAL_NET_AMOUNT, 
	-1 * sum(TOTAL_COST) as TOTAL_COST, 
	-1 * (sum(NET_AMOUNT) - sum(TOTAL_COST)) as TOTAL_PROFIT
	from (
		select a.CUSTOMER_ID,
		b.UNIT_PRICE * b.QUANTITY as NET_AMOUNT,
		b.COST * b.QUANTITY as TOTAL_COST
		from BAD_STOCK_RETURN a
		join BAD_STOCK_RETURN_ITEM b
		  on b.BAD_STOCK_RETURN_ID = a.ID
		where a.POST_IND = 'Y'
        and a.POST_DT >= :fromDate
        and a.POST_DT <= :toDate
	) agg
	group by CUSTOMER_ID
	union all
	select CUSTOMER_ID, 
		-1 * sum(NET_AMOUNT) as TOTAL_NET_AMOUNT,
		-1 * sum(TOTAL_COST) as TOTAL_COST, 
		-1 * (sum(NET_AMOUNT) - sum(TOTAL_COST)) as TOTAL_PROFIT
	from (
		select d.CUSTOMER_ID,
		c.UNIT_PRICE * b.QUANTITY * (1 - DISCOUNT_1/100) * (1 - DISCOUNT_2/100) * (1 - DISCOUNT_3/100) - (FLAT_RATE_DISCOUNT / c.QUANTITY * b.QUANTITY) as NET_AMOUNT,
		c.COST * b.QUANTITY as TOTAL_COST
		from NO_MORE_STOCK_ADJUSTMENT a
		join NO_MORE_STOCK_ADJUSTMENT_ITEM b
		  on b.NO_MORE_STOCK_ADJUSTMENT_ID = a.ID
		join SALES_INVOICE_ITEM c
		  on c.ID = b.SALES_INVOICE_ITEM_ID
		join SALES_INVOICE d
		  on d.ID = a.SALES_INVOICE_ID
		where a.POST_IND = 'Y'
        and a.POST_DT >= :fromDate
        and a.POST_DT < date_add(:toDate, interval 1 day)
	) agg
	group by CUSTOMER_ID
) main
join CUSTOMER cust
  on cust.ID = main.CUSTOMER_ID
group by CUSTOMER_ID
order by cust.NAME
	]]>
	</entry>
	<entry name="salesByManufacturerReport">
	<![CDATA[
select m.NAME as MANUFACTURER_NAME, sum(AMOUNT) as TOTAL_AMOUNT
from (
	select MANUFACTURER_ID, sum(NET_AMOUNT) as AMOUNT
	from (
		select c.MANUFACTURER_ID,
		b.UNIT_PRICE * b.QUANTITY * (1 - DISCOUNT_1/100) * (1 - DISCOUNT_2/100) * (1 - DISCOUNT_3/100) - FLAT_RATE_DISCOUNT as NET_AMOUNT
		from SALES_INVOICE a
		join SALES_INVOICE_ITEM b
		  on b.SALES_INVOICE_ID = a.ID
		join PRODUCT c
		  on c.ID = b.PRODUCT_ID
		where a.MARK_IND = 'Y'
		and (a.CUSTOMER_ID = :customer or '' = :customer)
        and a.TRANSACTION_DT >= :fromDate
        and a.TRANSACTION_DT <= :toDate
	) agg
	group by MANUFACTURER_ID
    union all
	select MANUFACTURER_ID, -1 * sum(NET_AMOUNT) as AMOUNT
	from (
		select e.MANUFACTURER_ID,
		c.UNIT_PRICE * b.QUANTITY * (1 - DISCOUNT_1/100) * (1 - DISCOUNT_2/100) * (1 - DISCOUNT_3/100) - (FLAT_RATE_DISCOUNT / c.QUANTITY * b.QUANTITY) as NET_AMOUNT
		from SALES_RETURN a
		join SALES_RETURN_ITEM b
		  on b.SALES_RETURN_ID = a.ID
		join SALES_INVOICE_ITEM c
		  on c.ID = b.SALES_INVOICE_ITEM_ID
		join SALES_INVOICE d
		  on d.ID = a.SALES_INVOICE_ID
		join PRODUCT e
		  on e.ID = c.PRODUCT_ID
		where a.POST_IND = 'Y'
		and (d.CUSTOMER_ID = :customer or '' = :customer)
        and a.POST_DT >= :fromDate
        and a.POST_DT < date_add(:toDate, interval 1 day)
	) agg
	group by MANUFACTURER_ID
) main
join MANUFACTURER m
  on m.ID = main.MANUFACTURER_ID
group by MANUFACTURER_ID
order by m.NAME
	]]>
	</entry>
	<entry name="stockCardInventoryReport">
select TRANSACTION_DT, TRANSACTION_NO, CUSTOMER_SUPPLIER_NAME, TRANSACTION_TYPE, TRANSACTION_TYPE_KEY,
UNIT, QUANTITY, UNIT_COST_OR_PRICE, REFERENCE_NO
from (
	select a.TRANSACTION_DT, a.SALES_INVOICE_NO as TRANSACTION_NO, c.NAME as CUSTOMER_SUPPLIER_NAME,
		'SALES INVOICE' as TRANSACTION_TYPE, 'SALES INVOICE' as TRANSACTION_TYPE_KEY, b.UNIT, b.QUANTITY,
		b.UNIT_PRICE as UNIT_COST_OR_PRICE, null as REFERENCE_NO
	from SALES_INVOICE a
	join SALES_INVOICE_ITEM b
		on b.SALES_INVOICE_ID = a.ID
	join CUSTOMER c
		on c.ID = a.CUSTOMER_ID
	where b.PRODUCT_ID = :product
	union all
	select a.TRANSACTION_DT, a.SALES_INVOICE_NO as TRANSACTION_NO, c.NAME as CUSTOMER_SUPPLIER_NAME,
		'SALES INVOICE' as TRANSACTION_TYPE, 'SALES INVOICE - CANCEL' as TRANSACTION_TYPE_KEY, b.UNIT, b.QUANTITY,
		b.UNIT_PRICE as UNIT_COST_OR_PRICE, null as REFERENCE_NO
	from SALES_INVOICE a
	join SALES_INVOICE_ITEM b
		on b.SALES_INVOICE_ID = a.ID
	join CUSTOMER c
		on c.ID = a.CUSTOMER_ID
	where b.PRODUCT_ID = :product
	and a.CANCEL_IND = 'Y'
	union all
	select a.RECEIVED_DT as TRANSACTION_DT, a.RECEIVING_RECEIPT_NO as TRANSACTION_NO,
		c.NAME as CUSTOMER_SUPPLIER_NAME,
		'RECEIVING RECEIPT' as TRANSACTION_TYPE, 'RECEIVING RECEIPT' as TRANSACTION_TYPE_KEY, b.UNIT, b.QUANTITY,
		b.COST as UNIT_COST_OR_PRICE, a.REFERENCE_NO
	from RECEIVING_RECEIPT a
	join RECEIVING_RECEIPT_ITEM b
		on b.RECEIVING_RECEIPT_ID = a.ID
	join SUPPLIER c
		on c.ID = a.SUPPLIER_ID
	where b.PRODUCT_ID = :product
	and a.POST_IND = 'Y'
	union all
	select a.POST_DT as TRANSACTION_DT, a.ADJUSTMENT_OUT_NO as TRANSACTION_NO,
		null as CUSTOMER_SUPPLIER_NAME,
		'ADJUSTMENT OUT' as TRANSACTION_TYPE, 'ADJUSTMENT OUT' as TRANSACTION_TYPE_KEY, b.UNIT, b.QUANTITY,
		null as UNIT_COST_OR_PRICE, a.REMARKS as REFERENCE_NO
	from ADJUSTMENT_OUT a
	join ADJUSTMENT_OUT_ITEM b
		on b.ADJUSTMENT_OUT_ID = a.ID
	where b.PRODUCT_ID = :product
	and a.POST_IND = 'Y'
	union all
	select a.POST_DT as TRANSACTION_DT, a.ADJUSTMENT_IN_NO as TRANSACTION_NO,
		null as CUSTOMER_SUPPLIER_NAME,
		'ADJUSTMENT IN' as TRANSACTION_TYPE, 'ADJUSTMENT IN' as TRANSACTION_TYPE_KEY, b.UNIT, b.QUANTITY,
		null as UNIT_COST_OR_PRICE, a.REMARKS as REFERENCE_NO
	from ADJUSTMENT_IN a
	join ADJUSTMENT_IN_ITEM b
		on b.ADJUSTMENT_IN_ID = a.ID
	where b.PRODUCT_ID = :product
	and a.POST_IND = 'Y'
	union all
	select a.POST_DT as TRANSACTION_DT, a.STOCK_QTY_CONV_NO as TRANSACTION_NO,
		null as CUSTOMER_SUPPLIER_NAME,
		'STOCK QTY CONVERSION' as TRANSACTION_TYPE, 'STOCK QTY CONVERSION FROM' as TRANSACTION_TYPE_KEY, 
		b.FROM_UNIT as UNIT, b.QUANTITY,
		null as UNIT_COST_OR_PRICE, REMARKS as REFERENCE_NO
	from STOCK_QTY_CONVERSION a
	join STOCK_QTY_CONVERSION_ITEM b
		on b.STOCK_QTY_CONVERSION_ID = a.ID
	where b.PRODUCT_ID = :product
	and a.POST_IND = 'Y'
	union all
	select a.POST_DT as TRANSACTION_DT, a.STOCK_QTY_CONV_NO as TRANSACTION_NO,
		null as CUSTOMER_SUPPLIER_NAME,
		'STOCK QTY CONVERSION' as TRANSACTION_TYPE, 'STOCK QTY CONVERSION TO' as TRANSACTION_TYPE,
		b.TO_UNIT as UNIT, b.CONVERTED_QTY as QUANTITY,
		null as UNIT_COST_OR_PRICE, REMARKS as REFERENCE_NO
	from STOCK_QTY_CONVERSION a
	join STOCK_QTY_CONVERSION_ITEM b
		on b.STOCK_QTY_CONVERSION_ID = a.ID
	where b.PRODUCT_ID = :product
	and a.POST_IND = 'Y'
	union all
	select a.POST_DT as TRANSACTION_DT, a.SALES_RETURN_NO as TRANSACTION_NO,
		e.NAME as CUSTOMER_SUPPLIER_NAME,
		'SALES RETURN' as TRANSACTION_TYPE, 'SALES RETURN' as TRANSACTION_TYPE_KEY, c.UNIT, b.QUANTITY,
		null as UNIT_COST_OR_PRICE, null as REFERENCE_NO
	from SALES_RETURN a
	join SALES_RETURN_ITEM b
		on b.SALES_RETURN_ID = a.ID
	join SALES_INVOICE_ITEM c
		on c.ID = b.SALES_INVOICE_ITEM_ID
	join SALES_INVOICE d
		on d.ID = a.SALES_INVOICE_ID
	join CUSTOMER e
		on e.ID = d.CUSTOMER_ID
	where c.PRODUCT_ID = :product
	and a.POST_IND = 'Y'
	union all
	select c.INVENTORY_DT as TRANSACTION_DT, null as TRANSACTION_NO,
		null as CUSTOMER_SUPPLIER_NAME,
		'INVENTORY CHECK' as TRANSACTION_TYPE, 'INVENTORY CHECK' as TRANSACTION_TYPE_KEY, b.UNIT, b.QUANTITY,
		null as UNIT_COST_OR_PRICE, null as REFERENCE_NO
	from AREA_INV_REPORT a
	join AREA_INV_REPORT_ITEM b
		on b.AREA_INV_REPORT_ID = a.ID
	join INVENTORY_CHECK c
		on c.ID = a.INVENTORY_CHECK_ID
	where b.PRODUCT_ID = :product
	and c.POST_IND = 'Y'
	union all
	select b.POST_DT, b.PROMO_REDEMPTION_NO as TRANSACTION_NO,
		d.NAME as CUSTOMER_SUPPLIER_NAME,
		'PROMO REDEMPTION' as TRANSACTION_TYPE, 'PROMO REDEMPTION' as TRANSACTION_TYPE_KEY, a.UNIT, a.QUANTITY,
		null as UNIT_COST_OR_PRICE, null as REFERENCE_NO
	from PROMO_REDEMPTION_REWARD a
	join PROMO_REDEMPTION b
		on b.ID = a.PROMO_REDEMPTION_ID
	join PROMO c
		on c.ID = b.PROMO_ID
	join CUSTOMER d
		on d.ID = b.CUSTOMER_ID
	where b.POST_IND = 'Y'
	and a.PRODUCT_ID = :product
	and c.PROMO_TYPE_ID in (1, 3)
) m
	</entry>
</root>